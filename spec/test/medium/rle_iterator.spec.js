const s1 = require('@medium/rle_iterator_1');

describe('rel iterator', () => {
    let cases = null;

    beforeEach(() => {
        cases = [{
            input: [[3,8,0,9,2,5],[2],[1],[1],[2]],
            output: [null,8,8,5,-1]
        }, {
            input: [
                [635,606,576,391,370,981,36,21,961,185,124,210,801,937,22,426,101,260,221,647,350,180,504,39,101,989,199,358,732,839,919,169,673,967,58,676,846,342,250,597,442,174,472,410,569,509,311,357,838,251],[5039],[62],[3640],[671],[67],[395],[262],[839],[74],[43],[42],[77],[13],[6],[3],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1]
            ],
            output: [null,839,839,174,509,509,509,357,251,251,251,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]
        }];
    });

    it('solution 1', () => {
        cases.forEach(c => {
            const it = new s1(c.input[0]);

            for (let i = 1; i < c.input.length; i++) {
                expect(it.next.apply(it, c.input[i])).toEqual(c.output[i]);
            }
        });
    });
});
